name: Build LLVM

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'LLVM version to build'
        default: '18.1.8'

permissions:
  contents: write

env:
  LLVM_VERSION: ${{ inputs.version }} 
  LLVM_PROJECTS: 'clang;lldb'
  LLVM_TARGETS: 'clang-format lldb lldb-server'
  LLVM_BINS: 'clang-format lldb lldb-server'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Github release
        run: |
          gh release create llvm-$LLVM_VERSION
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
  build:
    strategy:
      matrix:
        platform:
          - os: macos-arm64
            runner: macos-latest
          - os: linux-amd64
            runner: ubuntu-latest
          - os: windows-amd64
            runner: windows-latest
            TAR_ARGS:  '--exclude=*/clang/test/Driver/Inputs/* --exclude=*/libcxx/test/std/input.output/filesystems/Inputs/static_test_env/* --exclude=*/libclc/amdgcn-mesa3d'
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Setup for macOS
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja
      - name: Setup for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y cmake ninja-build
      - name: Setup for Windows
        if: runner.os == 'Windows'
        run: |
          choco install cmake ninja curl
      - name: Get llvm
        shell: bash
        run: |
          curl -L https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VERSION/llvm-project-$LLVM_VERSION.src.tar.xz -o llvm.tar.xz
          mkdir llvm
          tar -C llvm --strip-components=1 ${{ matrix.platform.TAR_ARGS }} -xJf llvm.tar.xz
      - name: Generate build files
        shell: bash
        run: |
          cd llvm
          cmake -B build llvm -GNinja -DLLVM_ENABLE_PROJECTS="$LLVM_PROJECTS" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DLLDB_INCLUDE_TESTS=OFF 
      - name: Build targets
        shell: bash
        run: |
          cd llvm/build
          ninja $LLVM_TARGETS
      - name: Upload products
        shell: bash
        run: |
          cd llvm/build/bin
          for BIN in $LLVM_BINS; do
            FILENAME=llvm-$LLVM_VERSION-${{matrix.platform-os}}-$BIN

            mv $BIN $FILENAME 
            gh release upload llvm-$LLVM_VERSION $FILENAME
          done
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}

      
